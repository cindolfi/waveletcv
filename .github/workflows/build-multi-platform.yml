# This starter workflow is for a CMake project running on multiple platforms.
name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations.
      # Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 6 configurations:
      # 1. <Windows, Debug, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Debug, latest GCC compiler toolchain on the default runner image, default generator>
      # 4. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 5. <Linux, Debug, latest Clang compiler toolchain on the default runner image, default generator>
      # 6. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        # os: [ubuntu-latest, windows-latest]
        # os: [ubuntu-latest]
        os: [windows-latest]
        build_type: [Release]
        # c_compiler: [gcc, clang, cl]
        # c_compiler: [gcc, cl]
        c_compiler: [cl]
        # c_compiler: [gcc]

        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          # - os: ubuntu-latest
          #   c_compiler: gcc
          #   cpp_compiler: g++

        # include:
        #   - os: windows-latest
        #     c_compiler: cl
        #     cpp_compiler: cl
        #   - os: ubuntu-latest
        #     c_compiler: gcc
        #     cpp_compiler: g++
        #   # - os: ubuntu-latest
        #   #   c_compiler: clang
        #   #   cpp_compiler: clang++
        # exclude:
        #   - os: windows-latest
        #     c_compiler: gcc
        #   # - os: windows-latest
        #   #   c_compiler: clang
        #   - os: ubuntu-latest
        #     c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs.
      # These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"


    - name: Install Dependencies (Windows)
      if: ${{ startsWith(matrix.os, 'windows') }}
      run: |
        curl --output opencv-windows.exe https://github.com/opencv/opencv/releases/latest/opencv-*-windows.exe
        opencv-windows.exe

    - name: Install Dependencies (Ubuntu)
      if: ${{ startsWith(matrix.os, 'ubuntu') }}
      run: sudo apt update && sudo apt install -y libopencv-dev python3-venv

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory.
      # `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DWTCV_BUILD_TESTS=ON
        -S ${{ github.workspace }}

    - name: Inspect Venv
      run: |
        ls ${{ steps.strings.outputs.build-output-dir }}
        ls ${{ steps.strings.outputs.build-output-dir }}/venv
        ls ${{ steps.strings.outputs.build-output-dir }}/venv/bin

    - name: Build
      # Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Build Tests
      # Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target wtcv-test

    - name: Build Examples
      # Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: |
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target examples

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration.
      # Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
